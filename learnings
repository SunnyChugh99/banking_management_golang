 docker run --name postgres13 -p 5433:5433 -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=root -d postgres:12-alpine


Golang database migration

migrate package in Golang

 migrate create -ext sql -dir db/migration -seq init_schema



sudo systemctl stop postgresql




docker run --name postgres17 -p 5433:5432 -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=root -d postgres:12-alpine

-------------------------------------------------------------------------------------------------------------------------------------------------
Migration up:
-------------------------------------------------------------------------------------------------------------------------------------------------
migrate -path db/migration -database "postgres://root:secret@localhost:5433/simple_bank?sslmode=disable" -verbose up



DATABASE/sql
 - very fast and straightforward
 - manual mapping SQL fields to variables
 - Easy to make mistakes, not caught at runtime


GORM
 - CRUD operations already implemented, very short prod code
 - must learn how to write complex queries using gorm's functions
 - Run slowly on high traffic


 SQLX 
 - Quite fast & easy to use
 - Field mapping via query text & struct tags
 - Failure won't occur until runtime   

 SQLC
 - Very fast & easy to use
 - Automatic code generation
 - Catch SQL query errors before generating codes
 - Full support postgres, mysql is experimental


 TESTING FRAMEWORK

 TESTIFY package



 docker run --name bankmanagement -p 080 -e DBSOURCE="postgres://root:secret@172.17.0.2:5432/simple_bank?sslmode=disable" sunnydocker1209/bank_management:v1


AWS password:

RDS databae:

user-  root 

password - vOe5Go2oTKtBIFSE60I7
host - simple-bank.cfaqkm6kysnc.eu-west-1.rds.amazonaws.com


migrateup:

migrate -path db/migration -database "postgres://root:vOe5Go2oTKtBIFSE60I7@simple-bank.cfaqkm6kysnc.eu-west-1.rds.amazonaws.com:5432/simple_bank" -verbose up


TOKEN_SYMMETRIC_KEY d316cf2a654bc266c875c08212fcf8cc




aws ssm code:

// Use this code snippet in your app.
// If you need more information about configurations or implementing the sample code, visit the AWS docs:   
// https://aws.github.io/aws-sdk-go-v2/docs/getting-started/

import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
)

func main() {
	secretName := "simple_bank"
	region := "eu-west-1"

	config, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(region))
	if err != nil {
		log.Fatal(err)
	}

	// Create Secrets Manager client
	svc := secretsmanager.NewFromConfig(config)

	input := &secretsmanager.GetSecretValueInput{
		SecretId:     aws.String(secretName),
		VersionStage: aws.String("AWSCURRENT"), // VersionStage defaults to AWSCURRENT if unspecified
	}

	result, err := svc.GetSecretValue(context.TODO(), input)
	if err != nil {
		// For a list of exceptions thrown, see
		// https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
		log.Fatal(err.Error())
	}

	// Decrypts secret using the associated KMS key.
	var secretString string = *result.SecretString

	// Your code goes here.
}


curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install



aws access_key_id - AKIAW3MECL3YPZUT6SGQ

secret_key : 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


SECRET ARN : arn:aws:secretsmanager:eu-west-1:471112769264:secret:simple_bank-V855WG


aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text
aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text


10683796@ltilbom20401298:~/Desktop/EVERYTHING/Learnings/SKILLS_LEARNINGS/banking_management_golang$ aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' 
DB_DRIVER=postgres
DB_SOURCE=postgres://root:vOe5Go2oTKtBIFSE60I7@simple-bank.cfaqkm6kysnc.eu-west-1.rds.amazonaws.com:5432/simple_bank
SERVER_ADDRESS=0.0.0.0:8080
TOKEN_SYMMETRIC_KEY=d316cf2a654bc266c875c08212fcf8cc
ACCESS_TOKEN_DURATION=15m
10683796@ltilbom20401298:~/Desktop/EVERYTHING/Learnings/SKILLS_LEARNINGS/banking_management_golang$ aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env



10683796@ltilbom20401298:~/Desktop/EVERYTHING/Learnings/SKILLS_LEARNINGS/banking_management_golang$ aws ecr get-login-password


eyJwYXlsb2FkIjoidjd0SG5lNFFueDA2RTRyNzVGNmk2L1RGeFR0WjlWaS83NUZ6cTNlOUp3U2NUeGxtSFVhZHB0UEsvSjBEYnMvNzVTTmZhVy9td2FaQlZyVytDNkFMTTM5UG9vZVlTcWVCTjZYZkRteWV5VEtiOExjTHh6QzNKWGNsR2RyUnJRdnNkcXV3cTE1WVhNN0xkVFBIZStmZDB0Umd3ZndoNHFEZlFBRXArQk5OQ1hYMStiWHpjMmsvWXh4YWdRelJMVjM4STlXNy9GbXdiT091TnpVejBsd2xwMVNZd2R5RC9YTXFMeHV5QUYxekJkWlAzZWN6MFBoVkRRRVBWQldxeVQ3eXJJaUFZNTQvZ3RWVlE3TjlGeFZIK2pibmNGODZSZ2R0TXVxNi8rVGwxVUZnSnAvNFFidU4ya1dVeGxMdFFzTFNzWTlCV0N1UlEvc0lwL1NTNkJhRURmZUIwcGdGQmQ4OWxMOU8zSU9VTWZoOXpHNGtLeVZaQUZhSGFVcjVRZTg4ZEw0aEFyMUVXN0YrbDl6QmlIWE5SREtsNllDL1BTb3R1MHliQWlERWRNWVJEWjRoRWoyNTl6cU85L01Ib2I1Uk9TTzRxNHJ6MUllZFZjSmgyVVZicklrUCtFakU5QnE5YW5yMzNOUzI0ajl5OE02M3VqUEJLTGJHc21oNlEveG9aNUs4aFRiZHp4WEFyS3dsZlliSzJRWXYzdzlrNXRWZkdROWlDUHNzV2NNWEs2cFdsdUxXckVpditiZDBycVhlS3VQRGxJQ2pPWHo4ekFBWVNBMlRPV1R5Vm5wL3JjTmRuWFloT2Z1N1pVOE9oUXBjL04rZTJIRUJiVmVNS2RtWkpqUGFUU3pqa2UzWm1xWFR1T0ZNbUxJRXZTeVRlaG5NQThJb0V3Q0Z6R29QWWpUaHlYOUd4YXdBNUcrTkZwZzd2elBpNWV2TWZtYkFaUGsvc1ZnNnY2U3A1bTZZYlpiVW5xMEQyeFBUVXo1d28yQUg3eHZybGN5UHMrL3IwT0IvS0JGaFBBNEpEOGM4MGdBb050WkxGQ3h3Y3pibFJVYVMra1hNd0pyZXJ3UEhPa2VoU3dBODNYRGJHSDM2RDhQNWxPRDlyTS9RR3I2WlROSXljcmNzSm5kTUd1YjVPS2dKSHNQR2pmQ253V3BXTjJOQU9LdW9Yb2lMRkFPQkRlMStOTGh6eGdoa3o5YkRTT2szSXFlRFJxaE04SHZjTWM1aEdlTXhUMm1vTkRqcmlkdU12MHF4QUEwTXdrQmozZFUxQlQ4QTRLSXJjdStwNDQ5R01pT3cyZVk3V01nRmFmMnd0elVsY3BtREUxYzVUb2t1ZEFpejRqRElBVXl6UzVTRnU0SUNCejFVemtJNE9GZUFrUT09IiwiZGF0YWtleSI6IkFRRUJBSGgrZFMrQmxOdTBOeG5Yd293YklMczExNXlqZCtMTkFaaEJMWnN1bk94azNBQUFBSDR3ZkFZSktvWklodmNOQVFjR29HOHdiUUlCQURCb0Jna3Foa2lHOXcwQkJ3RXdIZ1lKWUlaSUFXVURCQUV1TUJFRURINHNSV2R4dWR3L0Q5OVFvUUlCRUlBNzRKL0RlKzRDb0tpVG1Oa2V2Qzh2N21BR0ovL1lwdUxFbXdDWk5aR0V3Y2lFci9QM0s2Q1R5T1dWbTc5OVpxdWpPWjdoVWsrejBOMEh0ODQ9IiwidmVyc2lvbiI6IjIiLCJ0eXBlIjoiREFUQV9LRVkiLCJleHBpcmF0aW9uIjoxNzA4MjkxODUxfQ==



aws ecr get-login-password | docker login --username AWS --password-stdin 471112769264.dkr.ecr.eu-west-1.amazonaws.com


ROOT wala created in k8 lecture
access-key ==> AKIAW3MECL3YEX5UEKQF

secret-key ==>  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


docker login -u sunnydocker1209
dckr_pat_GKwEJj1hWilroJDzAIQFUEdjmU0


docker push sunnydocker1209/bank_management:test1

docker build -t sunnydocker1209/bank_management:test1 .



sunnycode
secret



How to manage user sessions?



---------------------------------------------------------------------------------------------
GRPC
---------------------------------------------------------------------------------------------

With protocol buffers, you write a .proto description of the data structure you wish to store


After all installations of protobuf and stuff


Had to install this plugin also for running make proto command - - -  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest


evans --host ltilbom20401298 --port 9090  -r true


---------------------------------------------------------------------------------------------
grpcurl
---------------------------------------------------------------------------------------------
10683796@ltilbom20401298:~/Desktop/EVERYTHING/Learnings/SKILLS_LEARNINGS/banking_management_golang$ grpcurl -plaintext -d '{"username": "ssssss", "password": "sasdvvddsds@Aaa", "full_name": "asasasasaa", "email": "sun@gmail.com"}' localhost:9090 pb.SimpleBank/CreateUser
{
  "user": {
    "username": "ssssss",
    "fullName": "asasasasaa",
    "email": "sun@gmail.com",
    "passwordChangedAt": "0001-01-01T00:00:00Z",
    "createdAt": "2024-03-02T12:52:56.196645Z"
  }
}


navigate to the main directory of project and run these commands to connect to grpc SERVER

grpcurl -plaintext -d '{"username": "ssssss", "password": "sasdvvddsds@Aaa", "full_name": "asasasasaa", "email": "sun@gmail.com"}' localhost:9090 pb.SimpleBank/CreateUser


grpcurl -plaintext -d '{"username": "ssssss", "password": "sasdvvddsds@Aaa"}' localhost:9090 pb.SimpleBank/LoginUser



protoc --proto_path=proto --go_out=pb --go_opt=paths=source_relative --grpc-gateway_out=pb --grpc-gateway_opt paths=source_relative \
    --go-grpc_out=pb --go-grpc_opt=paths=source_relative \
    proto/*.proto


GRPC

---------------------------------------------------------------------------------------------
Packages required - 
---------------------------------------------------------------------------------------------
1 - protoc (Protocol Buffers)
2-  protoc-gen-go-grpc (plugin req)
3 - protoc-gen-go  (plugin req)


Commands for installation - 

go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

make sure above plugin binaries are included in the go path


---------------------------------------------------------------------------------------------
Basic flow - 
---------------------------------------------------------------------------------------------
1 - write the proto files 
---you write a .proto description of the data structure you wish to store



2 - generate grpc code from the proto files writtend using the command ---
protoc --proto_path=proto --go_out=pb --go-grpc_out=pb proto/calculator.proto

3- Run the grpc server


4- Run the grpc client



grpcurl

grpcurl -plaintext -d '{"username": "ssssss", "password": "sasdvvddsds@Aaa", "full_name": "asasasasaa", "email": "sun@gmail.com"}' localhost:9090 pb.SimpleBank/CreateUser


grpcurl -plaintext -d '{"username": "ssssss", "password": "sasdvvddsds@Aaa"}' localhost:9090 pb.SimpleBank/LoginUser


---------------------------------------------------------------------------------------------
GRPC gateway
---------------------------------------------------------------------------------------------

gRPC Gateway is a tool that allows you to expose gRPC services as HTTP/JSON endpoints. gRPC (Remote Procedure Call) is a high-performance, open-source RPC framework developed by Google, primarily designed for communication between microservices. It uses Protocol Buffers (protobuf) as the interface definition language.

While gRPC is highly efficient for communication between services within the same infrastructure, it might not be the best choice for client-server communication over the internet, especially if clients are web browsers or mobile devices that typically communicate over HTTP and expect JSON payloads.

gRPC Gateway bridges this gap by automatically generating HTTP handlers that translate HTTP/JSON requests into gRPC calls. It allows clients to communicate with gRPC servers using HTTP/JSON, thus enabling interoperability between different types of clients and servers.

In summary, gRPC Gateway provides a convenient way to expose gRPC services to clients that use HTTP/JSON as their communication protocol. This enables compatibility with existing web frameworks, mobile applications, and other HTTP-based clients.





From a .proto file , protoc will convert it to both grpc and http gateway code

GRPC client ==> will connect directly to grpc server to send grpc request and recieve binary responses.
While http client ==> will connect to the http server to send http gateway req, ==> this will be translated to grpc format before sendig it to the grpc service handleer, it will also be translated back to json format before sending it back to the http gateway




Steps for gateway implementation -

1- add necessary packages in different package, run go mod tidy, go install.
2 - Add the required proto files in our folder, add the syntax for adding http gateway in proto
3 - in the protoc command add the necessary changes to produce the http gateway server interfaces.
4 - in the main.go write the code to run the http gateway server, ==> grpcMutex-- register it to grpc server, httpMutex,   and conn between both of them
5 - both servers should run at same time, test them using postmand and grpcurl

6 - extract metadata ==> clientIp, user-agent for both http gateway and grpc client  ==> metadata (context) , peer(context)



protoc --proto_path=proto --go_out=pb --go_opt=paths=source_relative --grpc-gateway_out=pb --grpc-gateway_opt paths=source_relative \
    --go-grpc_out=pb --go-grpc_opt=paths=source_relative \
    proto/*.proto